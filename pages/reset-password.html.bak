<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Google Analytics (GA4) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-6DT5E4V7SQ"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-6DT5E4V7SQ');

  // Track page load time
  window.addEventListener('load', function() {
    // Calculate page load time
    if(window.performance) {
      const perfData = window.performance.timing;
      const pageLoadTime = perfData.loadEventEnd - perfData.navigationStart;
      // Send to Google Analytics
      if(pageLoadTime > 0) {
        gtag('event', 'timing_complete', {
          'name': 'page_load',
          'value': pageLoadTime,
          'event_category': 'Page Timing'
        });
        console.log('Page load time: ' + pageLoadTime + 'ms');
      }
    }
  });
</script>

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reset Password - The Parsi Project</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Manrope:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <link rel="stylesheet" href="../css/logo.css">
    <link rel="stylesheet" href="../css/user-profile.css">
    <link rel="stylesheet" href="../css/auth.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Manrope', sans-serif;
            background-color: #000;
            color: #fff;
            height: 100vh;
            overflow: hidden;
        }

        body::before {
            content: '';
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            pointer-events: none;
            z-index: 9999;
            opacity: 0.18;
            background-image: url('data:image/svg+xml;utf8,<svg width="100%25" height="100%25" xmlns="http://www.w3.org/2000/svg"><filter id="noiseFilter"><feTurbulence type="fractalNoise" baseFrequency="0.8" numOctaves="4" stitchTiles="stitch"/></filter><rect width="100%25" height="100%25" filter="url(%23noiseFilter)"/></svg>');
        }

        .container {
            display: flex;
            height: 100vh;
        }

        /* Main Content Styles */
        .main-content {
            flex: 1;
            padding: 1.5rem;
            display: flex;
            flex-direction: column;
            height: 100vh;
            overflow: hidden;
            align-items: center;
            justify-content: center;
        }

        .page-title {
            font-size: 2.5rem;
            font-weight: bold;
            text-align: center;
            margin-bottom: 2rem;
        }
        
        .message-box {
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            text-align: center;
            display: none;
        }
        
        .message-box.error {
            background-color: rgba(220, 53, 69, 0.2);
            color: #dc3545;
            border: 1px solid rgba(220, 53, 69, 0.3);
        }
        
        .message-box.success {
            background-color: rgba(40, 167, 69, 0.2);
            color: #28a745;
            border: 1px solid rgba(40, 167, 69, 0.3);
        }
        
        .password-requirements {
            background-color: rgba(255, 255, 255, 0.05);
            padding: 10px 15px;
            border-radius: 5px;
            margin-bottom: 20px;
            font-size: 14px;
        }
        
        .password-requirements p {
            margin-bottom: 5px;
            color: #aaa;
        }
        
        .password-requirements ul {
            margin-left: 20px;
            color: #888;
        }
        
        .form-footer {
            text-align: center;
            margin-top: 20px;
            font-size: 14px;
            color: #888;
        }
        
        .form-footer a {
            color: #aaa;
            text-decoration: none;
            transition: color 0.3s ease;
        }
        
        .form-footer a:hover {
            color: #fff;
            text-decoration: underline;
        }
        
        .loading {
            display: none;
            width: 24px;
            height: 24px;
            border: 3px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
            position: absolute;
            right: 45%;
            top: 50%;
            transform: translateY(-50%);
        }
        
        @keyframes spin {
            to { transform: rotate(360deg) translateY(-50%); }
        }
        
        .auth-button {
            position: relative;
        }
        
        .form-error .error-text {
            display: block;
            color: #dc3545;
            font-size: 12px;
            margin-top: 5px;
        }
    </style>

    <!-- Performance optimization scripts -->
    <script defer src="/js/page-preloader.js"></script>
    <script defer src="/js/media-optimizer.js"></script>
  
</head>
<body>
    <div class="container">
        <div class="main-content">
            <h1 class="page-title">Reset Your Password</h1>
            
            <div class="auth-card">
                <div class="auth-form-container">
                    <form id="resetPasswordForm" class="auth-form active">
                        <div id="tokenValidationMessage" class="message-box"></div>
                        
                        <div class="form-group">
                            <label for="newPassword">New Password</label>
                            <input type="password" id="newPassword" required>
                            <div class="error-text"></div>
                        </div>
                        
                        <div class="form-group">
                            <label for="confirmNewPassword">Confirm New Password</label>
                            <input type="password" id="confirmNewPassword" required>
                            <div class="error-text"></div>
                        </div>
                        
                        <div class="password-requirements">
                            <p>Password must contain:</p>
                            <ul>
                                <li>At least 8 characters</li>
                                <li>At least one number</li>
                                <li>At least one special character</li>
                            </ul>
                        </div>
                        
                        <button type="submit" class="auth-button">
                            Reset Password
                            <span class="loading" id="resetLoading"></span>
                        </button>
                        
                        <div class="form-footer">
                            <p>Remember your password? <a href="login.html">Login</a></p>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script src="../js/auth.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const resetForm = document.getElementById('resetPasswordForm');
            const tokenValidationMessage = document.getElementById('tokenValidationMessage');
            const newPasswordInput = document.getElementById('newPassword');
            const confirmPasswordInput = document.getElementById('confirmNewPassword');
            const resetLoading = document.getElementById('resetLoading');
            
            // Get token from URL
            const urlParams = new URLSearchParams(window.location.search);
            const token = urlParams.get('token');
            
            if (!token) {
                tokenValidationMessage.classList.add('error');
                tokenValidationMessage.textContent = 'Invalid password reset link. Please request a new one.';
                tokenValidationMessage.style.display = 'block';
                resetForm.querySelectorAll('input, button').forEach(el => el.disabled = true);
                return;
            }
            
            resetForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                // Show loading spinner
                resetLoading.style.display = 'block';
                
                const newPassword = newPasswordInput.value;
                const confirmPassword = confirmPasswordInput.value;
                
                // Validate passwords
                if (newPassword.length < 6) {
                    showFormError(newPasswordInput, 'Password must be at least 6 characters');
                    resetLoading.style.display = 'none';
                    return;
                }
                
                if (newPassword !== confirmPassword) {
                    showFormError(confirmPasswordInput, 'Passwords do not match');
                    resetLoading.style.display = 'none';
                    return;
                }
                
                try {
                    // Call AUTH module to reset password
                    const result = await AUTH.resetPassword(token, newPassword);
                    
                    if (result.success) {
                        // Show success message
                        tokenValidationMessage.classList.remove('error');
                        tokenValidationMessage.classList.add('success');
                        tokenValidationMessage.textContent = 'Password reset successful! Redirecting to login...';
                        tokenValidationMessage.style.display = 'block';
                        
                        // Disable form
                        resetForm.querySelectorAll('input, button').forEach(el => el.disabled = true);
                        
                        // Redirect to login page after delay
                        setTimeout(() => {
                            window.location.href = 'login.html';
                        }, 3000);
                    } else {
                        throw new Error(result.message || 'Failed to reset password');
                    }
                } catch (error) {
                    console.error('Reset password error:', error);
                    tokenValidationMessage.classList.add('error');
                    tokenValidationMessage.classList.remove('success');
                    tokenValidationMessage.textContent = error.message || 'An error occurred. Please try again.';
                    tokenValidationMessage.style.display = 'block';
                } finally {
                    // Hide loading spinner
                    resetLoading.style.display = 'none';
                }
            });
            
            // Show form error
            function showFormError(inputElement, message) {
                const formGroup = inputElement.parentElement;
                formGroup.classList.add('form-error');
                
                const errorText = formGroup.querySelector('.error-text');
                errorText.textContent = message;
                
                // Remove error after 3 seconds
                setTimeout(() => {
                    formGroup.classList.remove('form-error');
                    errorText.textContent = '';
                }, 3000);
            }
        });
    </script>
</body>
</html>
